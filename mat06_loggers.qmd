---
title: "Mat06 loggers"
editor: visual
format: dashboard
---

```{r}
#| label: Load required packages and read in datasets
#| echo: false
#| output: false
# REQUIRED PACKAGES ------------------------------------------------------
# packages <- c("ggplot2","ggtext","htmlwidgets","janitor","lubridate",
#               "plotly","readxl","stringr","tidyverse")

packages <- c("ggplot2","ggtext",
              "plotly","tidyverse")
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))

# Functions --------------------------------------------------------------

source("importCSdata.r")

# Data Files---------------------------------------------------------------

blk1_1 <-  "./current/MAT06_Blk1_Met.dat"
blk1_2 <-  "./current/MAT06_BLK1_Soil.dat"
blk1_3 <-  "./current/MAT06_BLK1_GH_Soil.dat"
blk2_1 <- "./current/MAT06_Blk2_Met.dat"
blk3_1 <-  "./current/MAT06_BLK3_Met.dat"
blk3_2 <-  "./current/MAT06_BLK3_Soil.dat"

logger_file <-  c(blk1_1,blk1_2,blk1_3,blk2_1,blk3_1,blk3_2)

# Read all tables into a data frame

logger_data<- logger_file %>% map(function(x) importCSdata(x))

# Set up data frames
met_data <-  logger_data[[1]] %>%
  rename(ct_air_3m_avg = air_3m_avg, ct_rh = rh) %>%
  clean_names() %>%
  arrange(timestamp)%>%
  filter(timestamp > max(timestamp) %m-% months(6))

soil_data <- logger_data[[2]]  %>% 
  clean_names() %>%
  arrange(timestamp)%>%
  filter(timestamp > max(timestamp) %m-% months(6))

soil_GH_data <- logger_data[[3]]  %>% 
  clean_names() %>%
  arrange(timestamp)%>%
  filter(timestamp > max(timestamp) %m-% months(6))

met_data_blk2 <-  logger_data[[4]] %>%
  rename(gh_air_avg = ghairtc_avg, gh_rh = ghrh) %>% 
  clean_names() %>%
  arrange(timestamp)%>%
  filter(timestamp > max(timestamp) %m-% months(6))

# set the min and max for the initial x axis display in ggplotly
max_date <- max(c(met_data$timestamp,soil_data$timestamp,soil_GH_data$timestamp,
                  met_data_blk2$timestamp))
min_date <-max_date - lubridate::days(5) 
# ---- Setting up interactive plots with ggplotly-------
# Note for rangeslider to work:
# the dynamicTicks needs to be true for the buttons to show
# autorange needs to be FALSE for range to work

# Define xaxis options for using a range slider
xax<- list( 
  autorange=F,
  range= list(min_date, max_date),
  rangeselector = list(
    buttons = list(
      list(count = 1, label = "1 week", strp ="week", stepmode = "backward"),
      list(count = 3, label = "3 mo", step = "month", stepmode = "backward"),
      list(count = 6, label = "6 mo", step = "month", stepmode = "backward"),
      list(count = 1, label = "YTD", step = "year", stepmode = "todate"),
      list(step = "all")
    )),
  rangeslider = list(type = "date", thickness=0.05))

# Create a list of arguments for the annotation layout to add titles to the subplots
anno_agr <-list(x = .5,
                text = "",
                y = 1,
                yref = "paper",
                xref = "paper",
                xanchor = "center",
                yanchor = "top",
                yshift = 20,
                showarrow = FALSE,
                font = list(size = 15))
```

# Block 1

## Row {.tabset}

```{r}
#| label: plot_GH and GH-CT temeperatures/RH
#| echo: false
#| title: "Greenhouse and control air temperature/RH and battery."

# Air Temperature panel ---------------------------------------------------
  # Convert ggplot plots to ggplotly 
  #Title plot 1
  anno_agr$text <- "Air Temperature"
  p1_p <- ggplotly(
    ggplot(met_data) +
    geom_line(aes(x=timestamp, y=ct_air_3m_avg, color = "control")) +
    geom_line(aes(x=timestamp, y=gh_air_avg,color = "greenhouse")) +
    geom_hline(aes(yintercept = 0))+
    scale_x_datetime(expand = expansion(mult = c(.01, .01))) +
    scale_color_manual(values = c(
      'control' = 'blue',
      'greenhouse' = 'red')) +
    labs(#title = "MAT2006-blk1 Met Data",
         #subtitle = "Control, Greenhouse",
         x = "Date",
         y = "Degrees Celsius",
         color = '') +
    theme_bw() +
    theme(plot.title = element_text(hjust = 0.7),
          legend.position = "top"),
    dynamicTicks = T) %>% 
          layout(xaxis= xax,
                 yaxis =list(zerolinewidth = .1),
                 annotations = anno_agr) %>% 
    partial_bundle()
  
  #Title plot 2
  anno_agr$text <- "Relative Humidty"
  p2_p <- ggplotly(
    ggplot(met_data) +
    theme_bw() +
    geom_line(aes(x=timestamp,y=ct_rh,color="control RH"),linewidth=.1,linetype="twodash")+
    geom_line(aes(x=timestamp,y=gh_rh,color="greenhouse RH"),linewidth=.1,linetype="dotted")+
    scale_x_datetime()+
    scale_color_manual(values = c(
      "control RH" = "blue",
      "greenhouse RH" = "red")) +
    labs(#title = "MAT2006-Blk1 Air Temperature/RH",
         x = "Date",
         y = "Relative Humidity (%)",
         color = '')+
    theme(plot.title = element_text(hjust = 0.7),
          axis.title.y = element_markdown(color = "black", size = 8)),
      dynamicTicks = T) %>%
          layout(xaxis= xax,
                 annotations = anno_agr) %>%
    partial_bundle()
   anno_agr$text <- "Battery"
p3_p <- ggplotly( 
    ggplot(met_data) +
    geom_line(aes(x=timestamp, y=battv_min, color = "Battery min")) +
    scale_x_datetime()+
    labs(#title ="TMAT2006-Blk1 Battery",
         x = "Date",
         y = "volts",
         color = '')+
    coord_cartesian(ylim = c(8,15)) +
    scale_color_manual(values = c("Battery min" = "black"))+
    theme_bw(),
   dynamicTicks = T) %>% 
    layout(xaxis= list(
      autorange=F,range= list(min_date, max_date)),
      yaxis = list(autorange = FALSE),
      annotations = anno_agr) %>%
    partial_bundle()

#Put the plots together on a panel 
 subplot(p2_p,p1_p,p3_p, nrows=3, shareX = TRUE,titleY = T,heights = c(.3,.4,.3))# %>% 
    #layout(title = 'MAT06 Block 1 Air Temperature/RH and Battery',margin = 0.01)

```

```{r}
#| echo: false
#| title: "Greenhouse and control soil temperature and moisture."

sp3 <- soil_GH_data %>% select(timestamp,intersect(contains("gh"), contains("avg"))) %>%
    gather("key", "value", -timestamp) %>%
    mutate(treatment =as.factor(str_extract(key,"[ghct]+"))) %>% 
    ggplot(data=., aes(x=timestamp, y = value, color=key)) +
    scale_x_datetime()+
    labs(x = "Date",
         y = "Celsius ",
         color = 'Legend')+
    coord_cartesian(ylim = c(NA,15)) +
    theme_bw() +
    geom_line(aes(color = key, linewidth = treatment)) +
    guides(linewidth = "none") +
    scale_linewidth_manual(values = c("gh" = 1, "ghct" = 0.5))
  
  sp4 <- soil_GH_data %>% select(timestamp,contains("vw")) %>%
    mutate(across(where(is.numeric), ~na_if(.,-7999))) %>%
    gather("key", "value", -timestamp) %>%
    mutate(treatment =as.factor(str_extract(key,"[ghct]+"))) %>% 
    ggplot(data=., aes(x=timestamp, y = value, color = key)) +
    scale_x_datetime()+
    labs(x = "Date",
         y = "Fractional %",
         color = 'Legend')+
    coord_cartesian(ylim = c(0,NA)) +
    theme_bw() +
    geom_line(aes(color = key, linewidth = treatment)) +
    guides(linewidth = "none") +
    scale_linewidth_manual(values = c("gh" = 1, "ghct" = 0.5))
   # Greenhouse plot Soil Temperature and moisture interactive panel ---------------------------
  # First convert ggplot plots to ggplotly
  
  #Title plot 1
  anno_agr$text <- "Greenhouse Plot Soil Temperatures"
  sp3_p <- ggplotly(sp3,dynamicTicks = T) %>% 
    layout(xaxis = xax,
           yaxis = list(autorange=FALSE,
                        fixedrange= FALSE),
           annotations = anno_agr) %>% 
    partial_bundle()
  
  #Title plot 2
  anno_agr$text <- "Greenhouse Plot Soil moisture (VW)"
  sp4_p <- ggplotly(sp4,dynamicTicks = T) %>% 
    layout(xaxis = xax,
           yaxis = list(autorange=F,
                        fixedrange= FALSE),
           annotations = anno_agr) %>% 
    partial_bundle()
  
  #Put the plots together on a panel
  subplot(sp3_p,sp4_p, nrows=2, shareX = TRUE,titleY = T) #%>% 
    #layout(title = 'MAT206-Blk1 Greenhouse Plot Soil Temperature and Moisture',margin = 0.01)

```

```{r}
#| label: CT and F10 Plots
#| echo: false
#| title: "Soil temperature"

 #Soil ggplot Plots in CT, GH and F10 plots -----
  
  sp1 <- soil_data %>% select(timestamp,intersect(contains("ct"), contains("avg"))) %>%
    gather("key", "value", -timestamp)%>%
    ggplot(data=.,aes(x=timestamp, y = value,color=key)) +
    scale_x_datetime()+
    coord_cartesian(ylim = c(-15,15)) +
    labs(x = "Date",
         y = "Celsius ",
         color = 'Legend')+
    theme_bw() +
    geom_line(aes(color = key),linewidth=.1)
 
  sp2 <- soil_data %>% select(timestamp,starts_with("f10")) %>%
    gather("key", "value", -timestamp) %>%
    ggplot(data=., aes(x=timestamp, y = value,color=key)) +
    scale_x_datetime()+
    labs(x = "Date",
         y = "Celsius ",
         color = 'Legend')+
    coord_cartesian(ylim = c(-15,15)) +
    theme_bw() +
    geom_line(aes(color = key),linewidth=.1) +
    theme(plot.title = element_text(hjust = 1),
          axis.title.y = element_markdown(color = "black", size = 8),
          legend.position = "top") 
  
  # Soil Temperature interactive panel ----
  # First convert ggplot plots to ggplotly
  #Title plot 1 
  anno_agr$text <- "Control Plot Soil Temperatures"  
  sp1_p <- ggplotly(sp1,dynamicTicks = T) %>% 
    layout(xaxis= xax,
      yaxis = list(autorange=F,range = c(-15, 15)),
      annotations = anno_agr
    ) %>% 
    partial_bundle()
  
  #Title plot 2
  anno_agr$text <- "F10 Plot Soil Temperatures"
  sp2_p <- ggplotly(sp2,dynamicTicks = T) %>% 
    layout(xaxis= xax,
      yaxis = list(autorange=F,
      fixedrange= FALSE),
      annotations = anno_agr
    ) %>% 
    partial_bundle()
  
  
subplot(sp1_p,sp2_p, nrows=2, shareX = TRUE,titleY = T)#%>% 
    #layout(title = 'MAT06 Block 1 Soil Temperature',margin = 0.01)

```

::: {.card title="Documentation"}

{{< include documentation/MAT06block1.md >}}
:::

# Block 2

```{r}
#| echo: false
#| title: "Greenhouse air temperature and relative humidity."

# Block 2 plots
# Title plot1
anno_agr$text <- "Air Temperature"
p1_blk2_p <- ggplotly(
  ggplot(met_data_blk2) +
    geom_line(aes(
      x = timestamp, y = gh_air_avg, color = "greenhouse"
    )) +
    geom_hline(aes(yintercept = 0)) +
    geom_line(
      data = met_data,
      aes(x = timestamp, y = ct_air_3m_avg, color = "Block 1 control")
    ) +
    scale_x_datetime(expand = expansion(mult = c(.01, .01))) +
    scale_color_manual(values = c(
      'Block 1 control' = 'blue',
      'greenhouse' = 'red'
    )) +
    labs(x = "Date", y = "Degrees Celsius", color = '') +
    theme_bw() +
    theme(
      plot.title = element_text(hjust = 0.7),
      legend.position = "top"
    ),
  dynamicTicks = T
) %>%
  layout(
    xaxis = xax,
    yaxis = list(zerolinewidth = .1),
    annotations = anno_agr
  ) %>%
  partial_bundle()

#Title plot 2
anno_agr$text <- "Relative Humidty"
p2_blk2_p <- ggplotly(
 ggplot(met_data_blk2) +
  theme_bw() +
  geom_line(
    aes(x = timestamp, y = gh_rh, color = "greenhouse RH"),
    linewidth = .1,
    linetype = "dotted"
  ) +
  geom_line(
    data = met_data,
    aes(x = timestamp, y = ct_rh, color = "Block 1 control RH"),
    linewidth = .1,
    linetype = "twodash"
  ) +
  scale_x_datetime() +
  scale_color_manual(values = c(
    "Block 1 control RH" = "blue",
    "greenhouse RH" = "red"
  )) +
  labs(x = "Date", y = "Relative Humidity (%)", color = '') +
  theme(plot.title = element_text(hjust = 0.7),
        axis.title.y = element_markdown(color = "black", size = 8)),
 dynamicTicks = T) %>%
  layout(xaxis = xax, annotations = anno_agr) %>%
  partial_bundle()

#Title plot 3
anno_agr$text <- "Battery"
p3_blk2_p <- ggplotly( 
  ggplot(met_data_blk2) +
  geom_line(aes(x = timestamp, y = battv_min, color = "Battery min")) +
  scale_x_datetime() +
  labs(x = "Date", y = "volts", color = '') +
  coord_cartesian(ylim = c(8, 15)) +
  scale_color_manual(values = c("Battery min" = "black")) +
  theme_bw(),
  dynamicTicks = T) %>%
  layout(
    xaxis = list(autorange = F, range = list(min_date, max_date)),
    yaxis = list(autorange = FALSE),
    annotations = anno_agr
  ) %>%
  partial_bundle()

#Put the plots together on a panel
subplot(
  p2_blk2_p,
  p1_blk2_p,
  p3_blk2_p,
  nrows = 3,
  shareX = TRUE,
  titleY = T,
  heights = c(.3, .5, .2),
  which_layout = 2
) #%>%
  #layout(title = 'MAT06 Block 2 Greenhouse Temperature/RH and Battery', margin = 0.01)

```

# Block 3

## Row {.tabset}

```{r}
#| echo: false
#| title: "Greenhouse and control air temperature and RH and battery"

  met_data <-  logger_data[[5]] %>%
    clean_names() %>%
    arrange(timestamp)%>%
    filter(timestamp > max(timestamp) %m-% months(6))
  
  soil_data <- logger_data[[6]]  %>% 
    clean_names() %>%
    arrange(timestamp)%>%
    filter(timestamp > max(timestamp) %m-% months(6))
  
# Define x axis max/min for using a range slider
 max_date <- max(c(met_data$timestamp,soil_data$timestamp))
 xax$range <- list(min_date, max_date)

```

```{r}
#| label: plot GH and GH-CT temperatures/RH
#| echo: false
#| title: "Greenhouse and control air temperature/RH and battery."  
    #Plots
  #****************************************************************************************************
  
 # attach(met_data)
  
  p1 <- ggplot(met_data) +
    geom_line(aes(x=timestamp, y=airtcontrol_avg, color = "control")) +
    geom_line(aes(x=timestamp, y=air_gh_avg,color = "greenhouse")) +
    geom_hline(aes(yintercept = 0))+
    scale_x_datetime(expand = expansion(mult = c(.01, .01))) +
    scale_color_manual(values = c(
      'control' = 'blue',
      'greenhouse' = 'red')) +
    labs(#title = "MAT2006-blk3 Met Data",
         #subtitle = "Control, Greenhouse",
         x = "Date",
         y = "Degrees Celsius",
         color = '') +
    theme_bw() +
    theme(plot.title = element_text(hjust = 1),
          legend.position = "top")
  p2 <- ggplot(met_data) +
    theme_bw() +
    geom_line(aes(x=timestamp,y=rhct,color="control RH"),linewidth=.1,linetype="twodash")+
    geom_line(aes(x=timestamp,y=rh_gh,color="greenhouse RH"),linewidth=.1,linetype="dotted")+
    scale_x_datetime()+
    scale_color_manual(values = c(
      "control RH" = "blue",
      "greenhouse RH" = "red")) +
    labs(title = "MAT2006-Blk3 Air RH",
         x = "Date",
         y = "Relative Humidity (%)",
         color = '')+
    theme(plot.title = element_text(hjust = 1),
          axis.title.y = element_markdown(color = "black", size = 8),
          legend.position = "top")
  p3 <- ggplot(met_data) +
    geom_line(aes(x=timestamp, y=battv_avg, color = "Battery avg")) +
    scale_x_datetime()+
    labs(#title ="MAT2006-Blk3",
         x = "Date",
         y = "volts",
         color = '')+
    scale_color_manual(values = c("Battery avg" = "black"))+
    theme(plot.title =  element_text(hjust = 1),
          legend.position = "top")+
    coord_cartesian(ylim = c(10,14)) +
    theme_bw() 
 
  # ---- Setting up interactive plots with ggplotly-------
  # Note for rangeslider to work:
  # the dynamicTicks needs to be true for the buttons to show
  # autorange needs to be FALSE for range to work
  
  # set the min and max for the initial x axis display in ggplotly
  min_date <-max_date - lubridate::days(5)
  
  # Air Temperature panel ----
  # First convert ggplot plots to ggplotly
  #Title plot 1
  anno_agr$text <- "Air Temperature"
  # Create 3 plots for the panel
  p1_p <- ggplotly(p1,dynamicTicks = T) %>% 
          layout(xaxis= xax,
                 yaxis =list(zerolinewidth = .1, 
                             fixedrange = FALSE),
                 annotations = anno_agr) %>% 
    partial_bundle()
  #Title plot 2
  anno_agr$text <- "Relative Humidty"
  p2_p <- ggplotly(p2,dynamicTicks = T) %>%
          layout(xaxis= xax,
                 yaxis = (list(fixedrange = FALSE)),
                 annotations = anno_agr) %>%
    partial_bundle()

  #Title plot 3
  anno_agr$text <- "Battery"
  p4_p <- ggplotly(p3, dynamicTicks = T) %>%
    layout(
      xaxis = list(autorange = F,
                   range = list(min_date, max_date)),
      yaxis = list(fixedrange = FALSE),
      annotations = anno_agr) %>%
    partial_bundle()
  
  #Put the plots together on a panel
subplot(p2_p,p1_p,p4_p, nrows=3, shareX = TRUE,titleY = T,
               heights = c(.2,.6,.2), which_layout = 2) #%>% 
    #layout(title = 'MAT2006-Blk3 CT_GH Air/RH Temperatures',margin = 0.01)

```

```{r}
#| echo: false
#| title: "Control, F10 and Greenhouse soil temperatures"

  #Soil ggplot Plots -----
  
  sp1 <- soil_data %>% select(timestamp,starts_with("ct")) %>%
    gather("key", "value", -timestamp)%>%
    ggplot(data=.,aes(x=timestamp, y = value,color=key)) +
    scale_x_datetime()+
    coord_cartesian(ylim = c(-15,15)) +
    labs(x = "Date",
         y = "Celsius ",
         color = 'Legend')+
    theme_bw() +
    geom_line(aes(color = key),linewidth=.1)
  
  sp2 <- soil_data %>% select(timestamp,starts_with("np")) %>%
    gather("key", "value", -timestamp) %>%
    ggplot(data=., aes(x=timestamp, y = value,color=key)) +
    scale_x_datetime()+
    labs(x = "Date",
         y = "Celsius ",
         color = 'Legend')+
    coord_cartesian(ylim = c(-15,15)) +
    theme_bw() +
    geom_line(aes(color = key),linewidth=.1) +
    theme(plot.title = element_text(hjust = 1),
          axis.title.y = element_markdown(color = "black", size = 8),
          legend.position = "top")
  
  sp3 <- soil_data %>% select(timestamp,starts_with("t107")) %>%
    gather("key", "value", -timestamp) %>%
    mutate(treatment =as.factor(str_extract(key,"[ghct]{2}"))) %>% 
    ggplot(data=.,aes(x=timestamp, y = value,color=key)) +
    scale_x_datetime()+
    coord_cartesian(ylim = c(NA,15)) +
    labs(x = "Date",
         y = "Celsius ",
         color = 'Legend')+
    theme_bw() +
    geom_line(aes(color = key,linewidth = treatment)) +
    guides(linewidth = "none") +
    scale_linewidth_manual(values = c("gh" = 1, "ct" = 0.2))
  
  sp4 <- soil_data %>% select(timestamp,contains("vw")) %>%
    gather("key", "value", -timestamp) %>%
    mutate(treatment =as.factor(str_extract(key,"[ghct]{2}"))) %>%
    mutate(across(where(is.numeric), ~na_if(.,-7999))) %>%
    ggplot(data=., aes(x=timestamp, y = value,color=key)) +
    scale_x_datetime()+
    labs(x = "Date",
         y = "Fractional %",
         color = 'Legend')+
    coord_cartesian(ylim = c(0,NA)) +
    theme_bw() +
    geom_line(aes(color = key,linewidth = treatment)) +
    guides(linewidth = "none") +
    scale_linewidth_manual(values = c("gh" = 1, "ct" = 0.2))
  
  # Soil Temperature interactive panel ---------------------------
  # First convert ggplot plots to ggplotly
  #Title plot 1 
  anno_agr$text <- "Control Plot Soil Temperatures"
  sp1_p <- ggplotly(sp1,dynamicTicks = T) %>% 
    layout(xaxis= xax,
      yaxis = list(autorange=F,range = c(-15, 15),
                   fixedrange=FALSE),
      annotations = anno_agr) %>% 
    partial_bundle()
  #Title plot 2
  anno_agr$text <- "F10 Plot Soil Temperatures"
  sp2_p <- ggplotly(sp2,dynamicTicks = T) %>% 
    layout(xaxis = xax,
      yaxis = list(autorange=F,range = c(-15, 15),
                   fixedrange =FALSE),
      annotations = anno_agr) %>% 
    partial_bundle()
  
  #Title plot 3
  anno_agr$text <- "Greenhouse Plot Soil Temperatures"
  sp3_p <- ggplotly(sp3,dynamicTicks = T) %>% 
    layout(xaxis = xax,
      yaxis = list(autorange=FALSE,
                   fixedrange= FALSE),
      annotations = anno_agr) %>% 
    partial_bundle()
  
  #Put the plots together on a panel
 subplot(sp3_p,sp1_p,sp2_p, nrows=3, shareX = TRUE,titleY = T) #%>% 
   # layout(title = 'Soil Temperature',margin = 0.01)


```

::: {.card title="Documentation"}

{{< include documentation/MAT06block3.md >}}
:::